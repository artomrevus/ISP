// <auto-generated />
using System;
using ISP.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ISP.DAL.Migrations
{
    [DbContext(typeof(IspDbContext))]
    [Migration("20250503152001_EquipmentPlacementAmount")]
    partial class EquipmentPlacementAmount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ISP.DAL.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("candidate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ClientStatusId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("client_status");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("ClientStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ConnectionDate")
                        .HasColumnType("date")
                        .HasColumnName("connection_date");

                    b.Property<int>("ConnectionTariffId")
                        .HasColumnType("int")
                        .HasColumnName("connection_tariff_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int>("InternetConnectionRequestId")
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionTariffId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InternetConnectionRequestId")
                        .IsUnique();

                    b.ToTable("Connection_", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.ConnectionEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConnectionEquipmentAmount")
                        .HasColumnType("int")
                        .HasColumnName("connection_equipment_amount");

                    b.Property<int>("ConnectionId")
                        .HasColumnType("int")
                        .HasColumnName("connection_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OfficeEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("OfficeEquipmentId");

                    b.ToTable("ConnectionEquipment", null, t =>
                        {
                            t.HasTrigger("ConnectionEquipmentTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("ISP.DAL.Entities.ConnectionTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("connection_tariff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTariff", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ConclusionDate")
                        .HasColumnType("date")
                        .HasColumnName("conclusion_date");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("int")
                        .HasColumnName("contract_status_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int")
                        .HasColumnName("interview_id");

                    b.Property<decimal>("MonthRate")
                        .HasColumnType("money")
                        .HasColumnName("month_rate");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterviewId")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contract_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contract_status");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("ContractStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeePositionId")
                        .HasColumnType("int")
                        .HasColumnName("employee_position_id");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int")
                        .HasColumnName("employee_status_id");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_position_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeePositionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_position");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("EmployeePosition", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.EmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmployeeStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("ISP.DAL.Entities.EquipmentPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_placement_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("EquipmentPlacementAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("equipment_placement_amount");

                    b.Property<int>("OfficeEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_id");

                    b.Property<int>("PurchaseEquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_equipment_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OfficeEquipmentId");

                    b.HasIndex("PurchaseEquipmentId");

                    b.ToTable("EquipmentPlacement", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EquipmentTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("equipment_type");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("EquipmentType", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("house_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("house_number");

                    b.Property<int>("StreetId")
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetConnectionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("InternetConnectionRequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_status_id");

                    b.Property<int>("InternetTariffId")
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateOnly>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("request_date");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InternetConnectionRequestStatusId");

                    b.HasIndex("InternetTariffId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("InternetConnectionRequest", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetConnectionRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_connection_request_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InternetConnectionRequestStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("internet_connection_request_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("InternetConnectionRequestStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("InternetSpeedMbits")
                        .HasColumnType("int")
                        .HasColumnName("internet_speed_mbits");

                    b.Property<int>("InternetTariffStatusId")
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_status_id");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("InternetTariffStatusId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("InternetTariff", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetTariffStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internet_tariff_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InternetTariffStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("internet_tariff_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("InternetTariffStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("InterviewRequestId")
                        .HasColumnType("int")
                        .HasColumnName("interview_request_id");

                    b.Property<int>("InterviewResultId")
                        .HasColumnType("int")
                        .HasColumnName("interview_result_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("InterviewRequestId")
                        .IsUnique();

                    b.HasIndex("InterviewResultId");

                    b.ToTable("Interview", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ApplicationDate")
                        .HasColumnType("date")
                        .HasColumnName("application_date");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidate_id");

                    b.Property<DateOnly?>("ConsiderationDate")
                        .HasColumnType("date")
                        .HasColumnName("consideration_date");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("InterviewRequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("interview_request_status_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("InterviewRequestStatusId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("VacancyId");

                    b.ToTable("InterviewRequest", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_request_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InterviewRequestStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("interview_request_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("InterviewRequestStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interview_result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InterviewResultName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("interview_result");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("InterviewResult", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("apartment_number");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("HouseId")
                        .HasColumnType("int")
                        .HasColumnName("house_id");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LocationTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_type");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("LocationType", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.OfficeEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<int>("OfficeEquipmentAmount")
                        .HasColumnType("int")
                        .HasColumnName("office_equipment_amount");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeEquipment", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("number");

                    b.Property<int>("PurchaseStatusId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_status_id");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("PurchaseStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.PurchaseEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_equipment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("PurchaseEquipmentAmount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("purchase_equipment_amount");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseEquipment", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.PurchaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("purchase_status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("PurchaseStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("street_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Street", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vacancy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppearanceDate")
                        .HasColumnType("date")
                        .HasColumnName("appearance_date");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("EmployeePositionId")
                        .HasColumnType("int")
                        .HasColumnName("employee_position_id");

                    b.Property<decimal>("MonthRate")
                        .HasColumnType("money")
                        .HasColumnName("month_rate");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("VacancyStatusId")
                        .HasColumnType("int")
                        .HasColumnName("vacancy_status_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("VacancyStatusId");

                    b.ToTable("Vacancy", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.VacancyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vacancy_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("create_date_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("VacancyStatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vacancy_status");

                    b.HasKey("Id");

                    b.ToTable("VacancyStatus", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Entities.Client", b =>
                {
                    b.HasOne("ISP.DAL.Entities.ClientStatus", "ClientStatus")
                        .WithMany("Clients")
                        .HasForeignKey("ClientStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Location", "Location")
                        .WithMany("Clients")
                        .HasForeignKey("LocationId")
                        .IsRequired();

                    b.Navigation("ClientStatus");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Connection", b =>
                {
                    b.HasOne("ISP.DAL.Entities.ConnectionTariff", "ConnectionTariff")
                        .WithMany("Connections")
                        .HasForeignKey("ConnectionTariffId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Employee", "Employee")
                        .WithMany("Connections")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.InternetConnectionRequest", "InternetConnectionRequest")
                        .WithOne("Connection")
                        .HasForeignKey("ISP.DAL.Entities.Connection", "InternetConnectionRequestId")
                        .IsRequired();

                    b.Navigation("ConnectionTariff");

                    b.Navigation("Employee");

                    b.Navigation("InternetConnectionRequest");
                });

            modelBuilder.Entity("ISP.DAL.Entities.ConnectionEquipment", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Connection", "Connection")
                        .WithMany("ConnectionEquipments")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.OfficeEquipment", "OfficeEquipment")
                        .WithMany("ConnectionEquipments")
                        .HasForeignKey("OfficeEquipmentId")
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("OfficeEquipment");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Contract", b =>
                {
                    b.HasOne("ISP.DAL.Entities.ContractStatus", "ContractStatus")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Interview", "Interview")
                        .WithOne("Contract")
                        .HasForeignKey("ISP.DAL.Entities.Contract", "InterviewId")
                        .IsRequired();

                    b.Navigation("ContractStatus");

                    b.Navigation("Employee");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Employee", b =>
                {
                    b.HasOne("ISP.DAL.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.Navigation("EmployeePosition");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Equipment", b =>
                {
                    b.HasOne("ISP.DAL.Entities.EquipmentType", "EquipmentType")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentTypeId")
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("ISP.DAL.Entities.EquipmentPlacement", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Employee", "Employee")
                        .WithMany("EquipmentPlacements")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.OfficeEquipment", "OfficeEquipment")
                        .WithMany("EquipmentPlacements")
                        .HasForeignKey("OfficeEquipmentId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.PurchaseEquipment", "PurchaseEquipment")
                        .WithMany("EquipmentPlacements")
                        .HasForeignKey("PurchaseEquipmentId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OfficeEquipment");

                    b.Navigation("PurchaseEquipment");
                });

            modelBuilder.Entity("ISP.DAL.Entities.House", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Street", "Street")
                        .WithMany("Houses")
                        .HasForeignKey("StreetId")
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetConnectionRequest", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Client", "Client")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.InternetConnectionRequestStatus", "InternetConnectionRequestStatus")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("InternetConnectionRequestStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.InternetTariff", "InternetTariff")
                        .WithMany("InternetConnectionRequests")
                        .HasForeignKey("InternetTariffId")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InternetConnectionRequestStatus");

                    b.Navigation("InternetTariff");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetTariff", b =>
                {
                    b.HasOne("ISP.DAL.Entities.InternetTariffStatus", "InternetTariffStatus")
                        .WithMany("InternetTariffs")
                        .HasForeignKey("InternetTariffStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.LocationType", "LocationType")
                        .WithMany("InternetTariffs")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired();

                    b.Navigation("InternetTariffStatus");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Interview", b =>
                {
                    b.HasOne("ISP.DAL.Entities.InterviewRequest", "InterviewRequest")
                        .WithOne("Interview")
                        .HasForeignKey("ISP.DAL.Entities.Interview", "InterviewRequestId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.InterviewResult", "InterviewResult")
                        .WithMany("Interviews")
                        .HasForeignKey("InterviewResultId")
                        .IsRequired();

                    b.Navigation("InterviewRequest");

                    b.Navigation("InterviewResult");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewRequest", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Candidate", "Candidate")
                        .WithMany("InterviewRequests")
                        .HasForeignKey("CandidateId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.InterviewRequestStatus", "InterviewRequestStatus")
                        .WithMany("InterviewRequests")
                        .HasForeignKey("InterviewRequestStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Vacancy", "Vacancy")
                        .WithMany("InterviewRequests")
                        .HasForeignKey("VacancyId")
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("InterviewRequestStatus");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Location", b =>
                {
                    b.HasOne("ISP.DAL.Entities.House", "House")
                        .WithMany("Locations")
                        .HasForeignKey("HouseId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Office", b =>
                {
                    b.HasOne("ISP.DAL.Entities.City", "City")
                        .WithMany("Offices")
                        .HasForeignKey("CityId")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ISP.DAL.Entities.OfficeEquipment", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Equipment", "Equipment")
                        .WithMany("OfficeEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Office", "Office")
                        .WithMany("OfficeEquipments")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Purchase", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Employee", "Employee")
                        .WithMany("Purchases")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.PurchaseStatus", "PurchaseStatus")
                        .WithMany("Purchases")
                        .HasForeignKey("PurchaseStatusId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PurchaseStatus");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ISP.DAL.Entities.PurchaseEquipment", b =>
                {
                    b.HasOne("ISP.DAL.Entities.Equipment", "Equipment")
                        .WithMany("PurchaseEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseEquipments")
                        .HasForeignKey("PurchaseId")
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Street", b =>
                {
                    b.HasOne("ISP.DAL.Entities.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Vacancy", b =>
                {
                    b.HasOne("ISP.DAL.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployeePositionId")
                        .IsRequired();

                    b.HasOne("ISP.DAL.Entities.VacancyStatus", "VacancyStatus")
                        .WithMany("Vacancies")
                        .HasForeignKey("VacancyStatusId")
                        .IsRequired();

                    b.Navigation("EmployeePosition");

                    b.Navigation("VacancyStatus");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Candidate", b =>
                {
                    b.Navigation("InterviewRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.City", b =>
                {
                    b.Navigation("Offices");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Client", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Connection", b =>
                {
                    b.Navigation("ConnectionEquipments");
                });

            modelBuilder.Entity("ISP.DAL.Entities.ConnectionTariff", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("ISP.DAL.Entities.ContractStatus", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Employee", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Contracts");

                    b.Navigation("EquipmentPlacements");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ISP.DAL.Entities.EmployeePosition", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("ISP.DAL.Entities.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Equipment", b =>
                {
                    b.Navigation("OfficeEquipments");

                    b.Navigation("PurchaseEquipments");
                });

            modelBuilder.Entity("ISP.DAL.Entities.EquipmentType", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ISP.DAL.Entities.House", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetConnectionRequest", b =>
                {
                    b.Navigation("Connection");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetConnectionRequestStatus", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetTariff", b =>
                {
                    b.Navigation("InternetConnectionRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InternetTariffStatus", b =>
                {
                    b.Navigation("InternetTariffs");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Interview", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewRequest", b =>
                {
                    b.Navigation("Interview");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewRequestStatus", b =>
                {
                    b.Navigation("InterviewRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.InterviewResult", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Location", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Entities.LocationType", b =>
                {
                    b.Navigation("InternetTariffs");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Office", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OfficeEquipments");
                });

            modelBuilder.Entity("ISP.DAL.Entities.OfficeEquipment", b =>
                {
                    b.Navigation("ConnectionEquipments");

                    b.Navigation("EquipmentPlacements");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseEquipments");
                });

            modelBuilder.Entity("ISP.DAL.Entities.PurchaseEquipment", b =>
                {
                    b.Navigation("EquipmentPlacements");
                });

            modelBuilder.Entity("ISP.DAL.Entities.PurchaseStatus", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Street", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ISP.DAL.Entities.Vacancy", b =>
                {
                    b.Navigation("InterviewRequests");
                });

            modelBuilder.Entity("ISP.DAL.Entities.VacancyStatus", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
